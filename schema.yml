openapi: 3.0.3
info:
  title: Blog API Project
  version: 1.0.0
  description: A sample blog to learn about DRF
paths:
  /accounts/api/token/:
    post:
      operationId: accounts_api_token_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /accounts/api/token/refresh/:
    post:
      operationId: accounts_api_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /accounts/logout/:
    post:
      operationId: accounts_logout_create
      tags:
      - accounts
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /accounts/register/:
    post:
      operationId: accounts_register_create
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRegistration'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRegistration'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRegistration'
          description: ''
  /accounts/user-profile/:
    get:
      operationId: accounts_user_profile_retrieve
      tags:
      - accounts
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: ''
    put:
      operationId: accounts_user_profile_update
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserProfile'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: ''
    patch:
      operationId: accounts_user_profile_partial_update
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserProfile'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: ''
  /accounts/users/:
    get:
      operationId: accounts_users_list
      tags:
      - accounts
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
          description: ''
    post:
      operationId: accounts_users_create
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: accounts_users_update
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: accounts_users_partial_update
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUser'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: accounts_users_destroy
      tags:
      - accounts
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /accounts/users/{id}/:
    get:
      operationId: accounts_users_list_2
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - accounts
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
          description: ''
    post:
      operationId: accounts_users_create_2
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: accounts_users_update_2
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: accounts_users_partial_update_2
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUser'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: accounts_users_destroy_2
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - accounts
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /accounts/verify-otp/{id}/:
    post:
      operationId: accounts_verify_otp_create
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyOtp'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/VerifyOtp'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/VerifyOtp'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyOtp'
          description: ''
    put:
      operationId: accounts_verify_otp_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyOtp'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/VerifyOtp'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/VerifyOtp'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyOtp'
          description: ''
    patch:
      operationId: accounts_verify_otp_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedVerifyOtp'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedVerifyOtp'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedVerifyOtp'
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyOtp'
          description: ''
  /auth/jwt/create/:
    post:
      operationId: auth_jwt_create_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /auth/jwt/refresh/:
    post:
      operationId: auth_jwt_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /auth/jwt/verify/:
    post:
      operationId: auth_jwt_verify_create
      description: |-
        Takes a token and indicates if it is valid.  This view provides no
        information about a token's fitness for a particular use.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenVerify'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenVerify'
          description: ''
  /auth/users/:
    get:
      operationId: auth_users_list
      tags:
      - auth
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
          description: ''
    post:
      operationId: auth_users_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserCreate'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreate'
          description: ''
  /auth/users/{phone_number}/:
    get:
      operationId: auth_users_retrieve
      parameters:
      - in: path
        name: phone_number
        schema:
          type: string
        required: true
      tags:
      - auth
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: auth_users_update
      parameters:
      - in: path
        name: phone_number
        schema:
          type: string
        required: true
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: auth_users_partial_update
      parameters:
      - in: path
        name: phone_number
        schema:
          type: string
        required: true
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUser'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: auth_users_destroy
      parameters:
      - in: path
        name: phone_number
        schema:
          type: string
        required: true
      tags:
      - auth
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /auth/users/activation/:
    post:
      operationId: auth_users_activation_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Activation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Activation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Activation'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activation'
          description: ''
  /auth/users/me/:
    get:
      operationId: auth_users_me_retrieve
      tags:
      - auth
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: auth_users_me_update
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: auth_users_me_partial_update
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUser'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: auth_users_me_destroy
      tags:
      - auth
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /auth/users/resend_activation/:
    post:
      operationId: auth_users_resend_activation_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendEmailReset'
          description: ''
  /auth/users/reset_password/:
    post:
      operationId: auth_users_reset_password_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendEmailReset'
          description: ''
  /auth/users/reset_password_confirm/:
    post:
      operationId: auth_users_reset_password_confirm_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetConfirm'
          description: ''
  /auth/users/reset_phone_number/:
    post:
      operationId: auth_users_reset_phone_number_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendEmailReset'
          description: ''
  /auth/users/reset_phone_number_confirm/:
    post:
      operationId: auth_users_reset_phone_number_confirm_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsernameResetConfirm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UsernameResetConfirm'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UsernameResetConfirm'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsernameResetConfirm'
          description: ''
  /auth/users/set_password/:
    post:
      operationId: auth_users_set_password_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetPassword'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SetPassword'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SetPassword'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetPassword'
          description: ''
  /auth/users/set_phone_number/:
    post:
      operationId: auth_users_set_phone_number_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetUsername'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SetUsername'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SetUsername'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetUsername'
          description: ''
  /posts/:
    get:
      operationId: posts_list
      description: CRUD posts
      tags:
      - posts
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PostRead'
          description: ''
    post:
      operationId: posts_create
      description: CRUD posts
      tags:
      - posts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostWrite'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PostWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PostWrite'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostWrite'
          description: ''
  /posts/{id}/:
    get:
      operationId: posts_retrieve
      description: CRUD posts
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this post.
        required: true
      tags:
      - posts
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostRead'
          description: ''
    put:
      operationId: posts_update
      description: CRUD posts
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this post.
        required: true
      tags:
      - posts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostWrite'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PostWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PostWrite'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostWrite'
          description: ''
    patch:
      operationId: posts_partial_update
      description: CRUD posts
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this post.
        required: true
      tags:
      - posts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedPostWrite'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedPostWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedPostWrite'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostWrite'
          description: ''
    delete:
      operationId: posts_destroy
      description: CRUD posts
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this post.
        required: true
      tags:
      - posts
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /posts/{post_id}/comment/:
    get:
      operationId: posts_comment_list
      description: CRUD comments for a particular post
      parameters:
      - in: path
        name: post_id
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - posts
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CommentRead'
          description: ''
    post:
      operationId: posts_comment_create
      description: CRUD comments for a particular post
      parameters:
      - in: path
        name: post_id
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - posts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentWrite'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CommentWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CommentWrite'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentWrite'
          description: ''
  /posts/{post_id}/comment/{id}/:
    get:
      operationId: posts_comment_retrieve
      description: CRUD comments for a particular post
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this comment.
        required: true
      - in: path
        name: post_id
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - posts
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentRead'
          description: ''
    put:
      operationId: posts_comment_update
      description: CRUD comments for a particular post
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this comment.
        required: true
      - in: path
        name: post_id
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - posts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentWrite'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CommentWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CommentWrite'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentWrite'
          description: ''
    patch:
      operationId: posts_comment_partial_update
      description: CRUD comments for a particular post
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this comment.
        required: true
      - in: path
        name: post_id
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - posts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCommentWrite'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCommentWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCommentWrite'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentWrite'
          description: ''
    delete:
      operationId: posts_comment_destroy
      description: CRUD comments for a particular post
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this comment.
        required: true
      - in: path
        name: post_id
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - posts
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /posts/like/{id}/:
    get:
      operationId: posts_like_retrieve
      description: Like, Dislike a post
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - posts
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
components:
  schemas:
    Activation:
      type: object
      properties:
        uid:
          type: string
        token:
          type: string
      required:
      - token
      - uid
    BlankEnum:
      enum:
      - ''
    CommentRead:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        author:
          type: string
          readOnly: true
        body:
          type: string
          title: Comment body
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        post:
          type: integer
      required:
      - author
      - body
      - created_at
      - id
      - post
      - updated_at
    CommentWrite:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        body:
          type: string
          title: Comment body
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        post:
          type: integer
      required:
      - body
      - created_at
      - id
      - post
      - updated_at
    GenderEnum:
      enum:
      - MALE
      - FEMALE
      type: string
      description: |-
        * `MALE` - Male
        * `FEMALE` - Female
    MaritalStatusEnum:
      enum:
      - SINGLE
      - MARRIED
      - DIVORCED
      - COMPLICATED
      - I'D RATHER NOT SAY
      type: string
      description: |-
        * `SINGLE` - Single
        * `MARRIED` - Married
        * `DIVORCED` - Divorced
        * `COMPLICATED` - Complicated
        * `I'D RATHER NOT SAY` - I'd Rather Not Say
    NullEnum:
      enum:
      - null
    PasswordResetConfirm:
      type: object
      properties:
        uid:
          type: string
        token:
          type: string
        new_password:
          type: string
      required:
      - new_password
      - token
      - uid
    PatchedCommentWrite:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        body:
          type: string
          title: Comment body
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        post:
          type: integer
    PatchedPostWrite:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        body:
          type: string
          title: Post body
        post_image:
          type: string
          format: uri
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        likes:
          type: array
          items:
            type: integer
    PatchedUser:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        first_name:
          type: string
          maxLength: 30
        last_name:
          type: string
          maxLength: 30
        date_of_birth:
          type: string
          format: date
          nullable: true
        gender:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/GenderEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        email:
          type: string
          format: email
          maxLength: 50
        phone_number:
          type: string
          pattern: ^\d{10}
          maxLength: 13
        is_active:
          type: boolean
        is_staff:
          type: boolean
    PatchedUserProfile:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        avatar:
          type: string
          format: uri
          nullable: true
        background_image:
          type: string
          format: uri
          nullable: true
        school:
          type: string
          nullable: true
          maxLength: 100
        marital_status:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/MaritalStatusEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        bio:
          type: string
          nullable: true
        website:
          type: string
          format: uri
          nullable: true
          maxLength: 200
        location:
          type: string
          nullable: true
          maxLength: 100
        user:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
        user_id:
          type: integer
          writeOnly: true
    PatchedVerifyOtp:
      type: object
      properties:
        otp:
          type: string
          writeOnly: true
    PostRead:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        author:
          type: string
          readOnly: true
        likes:
          type: string
          readOnly: true
        body:
          type: string
          title: Post body
        post_image:
          type: string
          format: uri
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - author
      - body
      - created_at
      - id
      - likes
      - updated_at
    PostWrite:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        body:
          type: string
          title: Post body
        post_image:
          type: string
          format: uri
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        likes:
          type: array
          items:
            type: integer
      required:
      - body
      - created_at
      - id
      - updated_at
    SendEmailReset:
      type: object
      properties:
        email:
          type: string
          format: email
      required:
      - email
    SetPassword:
      type: object
      properties:
        new_password:
          type: string
        current_password:
          type: string
      required:
      - current_password
      - new_password
    SetUsername:
      type: object
      properties:
        current_password:
          type: string
        new_phone_number:
          type: string
          title: Phone number
          pattern: ^\d{10}
          maxLength: 13
      required:
      - current_password
      - new_phone_number
    TokenObtainPair:
      type: object
      properties:
        phone_number:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - password
      - phone_number
      - refresh
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
      required:
      - access
      - refresh
    TokenVerify:
      type: object
      properties:
        token:
          type: string
          writeOnly: true
      required:
      - token
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        first_name:
          type: string
          maxLength: 30
        last_name:
          type: string
          maxLength: 30
        date_of_birth:
          type: string
          format: date
          nullable: true
        gender:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/GenderEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        email:
          type: string
          format: email
          maxLength: 50
        phone_number:
          type: string
          pattern: ^\d{10}
          maxLength: 13
        is_active:
          type: boolean
        is_staff:
          type: boolean
      required:
      - email
      - id
      - phone_number
    UserCreate:
      type: object
      properties:
        email:
          type: string
          format: email
          maxLength: 50
        phone_number:
          type: string
          pattern: ^\d{10}
          maxLength: 13
        password:
          type: string
          writeOnly: true
      required:
      - email
      - password
      - phone_number
    UserProfile:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        avatar:
          type: string
          format: uri
          nullable: true
        background_image:
          type: string
          format: uri
          nullable: true
        school:
          type: string
          nullable: true
          maxLength: 100
        marital_status:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/MaritalStatusEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        bio:
          type: string
          nullable: true
        website:
          type: string
          format: uri
          nullable: true
          maxLength: 200
        location:
          type: string
          nullable: true
          maxLength: 100
        user:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
        user_id:
          type: integer
          writeOnly: true
      required:
      - id
      - user
      - user_id
    UserRegistration:
      type: object
      properties:
        first_name:
          type: string
          maxLength: 30
        last_name:
          type: string
          maxLength: 30
        email:
          type: string
          format: email
          maxLength: 50
        phone_number:
          type: string
          pattern: ^\d{10}
          maxLength: 13
        date_of_birth:
          type: string
          format: date
          nullable: true
        gender:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/GenderEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        password:
          type: string
          writeOnly: true
          minLength: 8
        confirm_password:
          type: string
          writeOnly: true
          minLength: 8
      required:
      - confirm_password
      - email
      - password
      - phone_number
    UsernameResetConfirm:
      type: object
      properties:
        new_phone_number:
          type: string
          title: Phone number
          pattern: ^\d{10}
          maxLength: 13
      required:
      - new_phone_number
    VerifyOtp:
      type: object
      properties:
        otp:
          type: string
          writeOnly: true
      required:
      - otp
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
